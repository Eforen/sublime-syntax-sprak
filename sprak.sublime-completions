{
        "scope": "source.sprak",

        "completions":
        [
        		{ "trigger": "Sebastian\tThe name of the player charicter", "contents": "Sebastian" },

                { "trigger": "OnHack\t", "contents": "void OnHack(string name){\n\t$0\n}" },
                { "trigger": "OnIntruder\t", "contents": "void OnIntruder(string name){\n\t$0\n}" },
                { "trigger": "Count\tCount the number of elements in an array", "contents": "Count(${0:array})" },
                { "trigger": "Range\tCreate a range of numbers from 'min' to (and including) 'max'", "contents": "Range(${1:min}, ${0:max})" },
                { "trigger": "GetIndexes\tCreate a new array that contains the indexes of another array", "contents": "GetIndexes(${0:array})" },
                { "trigger": "Remove\tRemove an element from an array", "contents": "Remove(${1:array}, ${0:position})" },
                { "trigger": "RemoveAll\tRemove all elements from an array", "contents": "RemoveAll(${0:array})" },
                { "trigger": "HasIndex\tCheck if an index is in the array", "contents": "HasIndex(${1:array}, ${0:key})" },
                { "trigger": "Append\tAdd an element to the end of an array", "contents": "Append(${1:array}, ${0:element})" },
                { "trigger": "Type\tGet the type of something (returns a string)", "contents": "Type(${0:value})" },
                { "trigger": "Round\tRound a number to the nearest integer", "contents": "Round(${0:x})" },
                { "trigger": "Int\tRemove the decimals of a float", "contents": "Int(${0:x})" },
                { "trigger": "Mod\tGet the remainder of x / y", "contents": "Mod(${1:x}, ${0:y})" },
                { "trigger": "%\tGet the remainder of x / y", "contents": "Mod(${1:x}, ${0:y})" },
                { "trigger": "Info\tGet information about the system", "contents": "Info()" },
                { "trigger": "Random\tGet a random number between 0.0 and 1.0", "contents": "Random()" },
                { "trigger": "GetUser\tGet the name of who is using the computer, if any", "contents": "GetUser()" },
                { "trigger": "Name\tGet the name of the computer", "contents": "Name()" },
                { "trigger": "Time\tGet the total time as a float", "contents": "Time()" },
                { "trigger": "Width\tGet the screen width", "contents": "Width()" },
                { "trigger": "Height\tGet the screen height", "contents": "Height()" },
                { "trigger": "GetHour\tGet the current hour", "contents": "GetHour()" },
                { "trigger": "GetMinute\tGet the current minute", "contents": "GetMinute()" },
                { "trigger": "Sleep\tPause the master program", "contents": "Sleep(${0:seconds})" },
                { "trigger": "Quit\tStop the program", "contents": "Quit()" },
                { "trigger": "CharToInt\tConvert a single character to a numeric value, 'a' equals 0", "contents": "CharToInt(${0:character})" },
                { "trigger": "IntToChar\tConvert a number to a character, 0 equals 'a'", "contents": "IntToChar(${0:number})" },
                { "trigger": "ClearText\tRemove all text from the screen", "contents": "ClearText()" },
                { "trigger": "Print\tPrint text to the screen", "contents": "Print(${0:text})" },
                { "trigger": "Say\tSay something through speaker. (via the object)", "contents": "Say(${0:text})" },
                { "trigger": "PlaySound\tPlay a sound", "contents": "PlaySound(${0:soundName})" },
                { "trigger": "Pitch\tSet the pitch of the sound", "contents": "Pitch(${0:pitch})" },
                { "trigger": "Sin\tThe sinus function", "contents": "Sin(${0:x})" },
                { "trigger": "Cos\tThe cosinus function", "contents": "Cos(${0:x})" },
                { "trigger": "PrintS\tPrint text without skipping to a new line afterwards", "contents": "PrintS(${0:text})" },
                { "trigger": "Input\tDisplay a prompt and receive text input from the keyboard", "contents": "Input(${0:prompt})" },
                { "trigger": "Line\tDraw a line on the screen", "contents": "Line(${1:x1}, ${0:y1}, ${2:x2}, ${3:y2})" },
                { "trigger": "Text\tDraw text in a specific place", "contents": "Text(${1:x}, ${0:y}, ${2:text})" },
                { "trigger": "Rect\tDraw a rectangle on the screen", "contents": "Rect(${1:x1}, ${0:y1}, ${2:x2}, ${3:y2})" },
                { "trigger": "DisplayGraphics\tClear the screen and display graphical elements", "contents": "DisplayGraphics()" },
                { "trigger": "Color\tSet the color to draw or print text with", "contents": "Color(${1:r}, ${0:g}, ${2:b})" },
                { "trigger": "Repeat\tKeep a value between between 0 and an upper bound", "contents": "Repeat(${1:x}, ${0:bound}" },
                { "trigger": "HSVtoRGB\tHue, Saturation, Value -> [r, g, b]", "contents": "HSVtoRGB(${1:H},${0:S},${2:V})" },
                { "trigger": "RGBToHSV\t[r, g, b] -> Hue, Saturation, Value", "contents": "RGBToHSV(${1:r},${0:g},${2:b})" },
                { "trigger": "Lines\tno ingame desc likely a list of [x,y] objects to denote points on a poly line", "contents": "Lines(${0:points})" },
                { "trigger": "GetConnections\tGet a list of all connections (list of names)", "contents": "GetConnections()" },
                { "trigger": "Slurp\tUse with caution", "contents": "Slurp()" },
                { "trigger": "Connect\tNo ingame desc", "contents": "Connect(${0:name})" },
                { "trigger": "DisconnectAll\tRemove all connections", "contents": "DisconnectAll()" },
                { "trigger": "StringContains\tChecks whether a string contains a substring", "contents": "StringContains(${1:string}, ${0:substring})" },
                { "trigger": "MovePerson\tMove an intruder in the room to the position of another thing", "contents": "MovePerson(${1:name}, ${0:target} )" },
                { "trigger": "ZapPerson\tZap an intruder in the room (will make them fall asleep)", "contents": "ZapPerson(${0:name})" },
                { "trigger": "RestoreCode\tResets code to default state", "contents": "RestoreCode(${0:name})" },
                { "trigger": "Broadcast\tBroadcast a message, Use with caution.", "contents": "Broadcast(${0:pMessage})" },
                { "trigger": "IsKeyPressed\tIs a key pressed? (left/right/down/up/space)", "contents": "IsKeyPressed(${0:key})" },
                { "trigger": "HasFloppy\tIs there a floppy in the drive?", "contents": "HasFloppy()" },
                { "trigger": "LoadData\tLoad data from the floppy, split by lines", "contents": "LoadData()" },
                { "trigger": "ClearData\tClear all data on the floppy", "contents": "ClearData()" },
                { "trigger": "SaveData\tSave data to the floppy by appending a line at the end", "contents": "SaveData(${0:data})" },
                { "trigger": "BootFromFloppy\tRestart the computer but run the code on the floppy instead", "contents": "BootFromFloppy()" },

                /* Screwdrivers */
                { "trigger": "SetMhz\tSet the speed of the computer you use the screwdriver on. (Max 500)", "contents": "SetMhz(${0:Mhz})" },
                { "trigger": "EnableAPI\tEnable an API", "contents": "EnableAPI(${0:name})" },
                { "trigger": "SetMaxTime\tSet the maximum execution time for the computer", "contents": "SetMaxTime(${0:maxTime})" },

                /* Drinks */
                { "trigger": "Speed\tChange the speed of the drinker", "contents": "Speed(${0:d})" },
                { "trigger": "Charisma\tChange the Charisma of the drinker", "contents": "Charisma(${0:d})" },
                { "trigger": "Smelliness\tChange the Smelliness of the drinker", "contents": "Smelliness(${0:d})" },
                { "trigger": "Sleepiness\tChange the Sleepiness of the drinker", "contents": "Sleepiness(${0:d})" },
                { "trigger": "Drunkenness\tChange the Drunkenness of the drinker", "contents": "Drunkenness(${0:d})" },
                { "trigger": "Drink\tJust lower the amount of liquid", "contents": "Drink(${0:d})" },
                { "trigger": "Corruption\tUndocumented effect", "contents": "Corruption(${0:amount})" },
                { "trigger": "IsUser\tTest if the drinker has a certain name", "contents": "IsUser(${0:name})" },
                { "trigger": "GetRoom\tGet the room of the drinker", "contents": "GetRoom()" },
                { "trigger": "RemoteFunctionCall\tCall remote function on connected objects", "contents": "RemoteFunctionCall(${1:receiverIndex}, ${0:functionName}, ${2:arguments})" },

                /* Drugs / Food */
                { "trigger": "Trippy\t\"Trippy\"", "contents": "Trippy()" },
                { "trigger": "TurnLeft\tTurn left", "contents": "TurnLeft()" },
                { "trigger": "TurnRight\tTurn right", "contents": "TurnRight()" },
                { "trigger": "FastForward\tMakes time appear to go faster", "contents": "FastForward()" },
                { "trigger": "Move\tMove forward one step", "contents": "Move()" },
                { "trigger": "QuickBoost\tGet a quick energy boost", "contents": "QuickBoost()" },

                /* Templates
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                { "trigger": "\t", "contents": "(${0:x})" },
                */
        ]
}